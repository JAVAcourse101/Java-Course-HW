package Taks_1;

public class AllWork {
	private static final int DEFOULD_NUMBER_OF_TASKS = 10;
	private Task[] tasks;
	private int freePlacesForTasks;
	private int currentUnassignedTask;
	private int indexForAdding;

	AllWork() {
		this.tasks = new Task[DEFOULD_NUMBER_OF_TASKS];
		this.setFreePlacesForTasks(DEFOULD_NUMBER_OF_TASKS);
		this.indexForAdding = 0;
		this.currentUnassignedTask=-1;
	}

	public void addTask(Task task) {
		if (task == null) {
			return;
		}
		this.tasks[indexForAdding] = task;
		setFreePlacesForTasks(getFreePlacesForTasks() - 1);
		indexForAdding = (indexForAdding + 1) % this.tasks.length;
		this.setCurrentUnassignedTask();

	}

	public Task getNextTask() {
		if (this.currentUnassignedTask == -1) {
			return null;
		}
		Task temp=this.tasks[currentUnassignedTask];
			return temp;
	}

	public boolean isAllWorkDone() {
		for (int i = 0; i < tasks.length; i++) {
			if (this.tasks[i] != null && this.tasks[i].getWorkingHours() > 0) {
				return false;
			}
		}
		return true;
	}

	void setCurrentUnassignedTask() {
		for (int i = 0; i < this.tasks.length; i++) {
			if (this.tasks[i] != null && this.tasks[i].getOwner() == null&&this.tasks[i].getWorkingHours()!=0) {
				this.currentUnassignedTask = i;
				return;
			}
		}
		this.currentUnassignedTask = -1;
	}

	
	public void genarateTasks(){
		for (int i = 1; i <= tasks.length; i++) {
			String name="Task "+String.valueOf(i);
			this.addTask(new Task(name, i*2+1));
			setFreePlacesForTasks(getFreePlacesForTasks() - 1);
		}
	}
	public void showAllTasks(){
		for (int i = 0; i < tasks.length; i++) {
			if (this.tasks[i]!=null){
				System.out.println(this.tasks[i].toString());
			}
			
		}
	}

	public int getFreePlacesForTasks() {
		return freePlacesForTasks;
	}

	private void setFreePlacesForTasks(int freePlacesForTasks) {
		this.freePlacesForTasks = freePlacesForTasks;
	}
	
	public int getMaxNumberOfPlacesForTasks() {
		return this.tasks.length;
	}

	public int getCurrentUnassignedTask() {
		return currentUnassignedTask;
	}
}
